<?php

# vim: set expandtab:
# vim: tabstop=2:
# vim: ai:
# vim: shiftwidth=2:

/**
 * @file
 * Module relating to the CEC_multilingual object model
 */

/** 
 * Implements hook_menu()
 */

define('ISLANDORA_MULTILINGUAL_TEXTGROUP', 'islandora_multilingual');
define('ISLANDORA_MULTILINGUAL_CMODEL', 'islandora:CEC_multilingual');
define('DEBUG', FALSE);

function islandora_multilingual_menu() {
  $items = array();

  $items['admin/islandora/multilingual'] = array(
    'title' => 'Multilingual',
    'description' => t('Administer the multilingual module'),
    'file' => 'admin/multilingual.admin.inc',
    'page callback' => 'multilingual_main',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
);

  $items['admin/islandora/multilingual/refresh'] = array(
      'title' => 'Reset vocabulary strings',
      'description' => 'Reset to default translations strings',
      'file' => 'admin/multilingual.admin.inc',
      'page callback' => 'multilingual_reset',
      'access arguments' => array('administer site configuration'),
      'type' => MENU_LOCAL_ACTION,
  );

  // non-multilingual configuration: the "add" tab
  $items['islandora/object/%islandora_object/add'] = array(
    'title' => 'Add',
    'page callback' => 'islandora_basic_collection_ingest_action',
    'page arguments' => array(2),
    'file' => 'islandora_basic_collection.module',
    'file path' => drupal_get_path('module', 'islandora_basic_collection'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'modified_collection_add_access',
    'access arguments' => array(2),
  );
  // non-multilingual configuration: autocomplete paths
  $items['admin/islandora_multilingual/solr_autocomplete'] = array(
      'title' => 'autocomplete callback',
      'description' => 'Autocomplete from values in a solr field',
      'file' => 'includes/autocomplete.inc',
      'page callback' => 'islandora_multilingual_solr_autocomplete',
      'page arguments' => array(3,4),
      'access callback' => 'user_is_logged_in', 
      'type' => MENU_CALLBACK,
  );
  // non-multilingual configuration: autocomplete from hackily hard-coded files because I'm too lazy to port Islandora Autocomplete from 6
  $items['admin/islandora_multilingual/file_autocomplete'] = array(
      'title' => 'autocomplete callback',
      'description' => 'Autocomplete from JSON in a file.',
      'file' => 'includes/autocomplete.inc',
      'page callback' => 'islandora_multilingual_file_autocomplete',
      'page arguments' => array(3,4),
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
  );
  // non-multilingual configuration: autocomplete path for translated vocab
  $items['admin/islandora_multilingual/vocab_autocomplete'] = array(
      'title' => 'autocomplete callback for vocab',
      'description' => 'Autocomplete from translation strings in a text group in a given language',
      'file' => 'includes/autocomplete.inc',
      'page callback' => 'islandora_multilingual_vocabulary_autocomplete',
      'page arguments' => array(3,4,5),
      'access callback' => 'user_is_logged_in', 
      'type' => MENU_CALLBACK,
  );

  return $items;
}


/** 
 * Implements hook_variable_info()
 */
function islandora_multilingual_variable_info() {
  $variable = array();
  $variable['islandora_languages'] = array(
    'title' => t('Islandora languages'),
    'description' => t('Languages in which Islandora objects should be sought. This is the upper-case version of the language code in Drupal.'),
    'type' => 'string',
  );
}

/**
 * Implements hook_i18n_string_info().
 */
function islandora_multilingual_i18n_string_info() {
    return array(
        'islandora_multilingual' => array(
            'title' => t('Islandora Multilingual'),
            'description' => t('Translatable controlled vocabulary'),
            'format' => FALSE,
            'list' => TRUE,
        ),
    );
}

/**
 * Implements hook_theme().
 */
function islandora_multilingual_theme($existing, $type, $theme, $path) {
  return array(
    // this includes some general theming that should be moved out.
    'islandora_multilingual' => array(
      'file' => 'theme/islandora_multilingual.theme.inc',
      'template' => 'theme/islandora-multilingual',
      'pattern' => 'islandora_multilingual__',
      'variables' => array('islandora_object' => NULL),
    ),
    'language_links' => array(
      'file' => 'theme/language_links.theme.inc',
      'template' => 'theme/language-links',
      'variables' => array('lang_array' => array()),
    ),
    // more general than multilingual
    'display_title' => array(
      'file' => 'theme/display_title.theme.inc',
      'template' => 'theme/display-title',
      'variables' => array('title' => '', 'subTitle' => ''),
    ),
  );
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function islandora_multilingual_islandora_CEC_multilingual_islandora_view_object($object, $page_number, $page_size) {
    $result = array();
    $workflow = islandora_custom_workflow($object);
    if ($workflow) {
        $result['publish'] = $workflow;
    }
    $result['Multilingual View'] = theme('islandora_multilingual', array('islandora_object' => $object));
    
    return $result;
}


function islandora_custom_workflow($object) {
    if (isset($object['POLICY']) and !islandora_object_access(FEDORA_VIEW_OBJECTS, $object, user_load(0))) {
        if (islandora_object_manage_access_callback(FEDORA_PURGE, $object)) {
            $delete_link = l(t('Click here to publish this document to the public.'), "islandora/object/{$object->id}/datastream/POLICY/delete");
        } else {
            $delete_link = t('You do not have sufficient permissions to publish this document.');
        }
        return '<div class="notice">' . t('This document is not visible to the public. ' . $delete_link . '</div>');
    }
}
/**
 * Implements hook_islandora_ingest_steps().
 * though actually hook_islandora_CMODEL_PID_islandora_ingest_steps().
 * ORLY?
 */
function islandora_multilingual_islandora_CEC_multilingual_islandora_ingest_steps(array $configuration) {
  return array(
    'islandora_multlingual_pdf_file_upload' => array(
      'weight' => 10,
      'type' => 'form',
      'form_id' => 'islandora_multilingual_pdf_upload_form',
      'module' => 'islandora_multilingual',
      'file' => 'includes/multilingual_upload.form.inc',
    )
  );
}

/** 
 * Implements hook_islandora_datastream_ingested().
 *
 * If a MODS ds was ingested, create the other languages.
 * If an OBJ ds was ingested, create the thumbnails.
 */
function islandora_multilingual_islandora_datastream_ingested($object, $datastream) {
    if (DEBUG) {
        $dss = array();
        foreach ($object as $ds) {
            $dss[] = $ds->id;
        }
        watchdog('multilingual', 'start hook ingested for:' . $datastream->id . ' with datastreams '. implode($dss, ' '));
    }
  module_load_include('inc', 'islandora_multilingual', 'includes/Multilingual');
  if (preg_match('/MODS-/', $datastream->id) === 1) {
    $missing_ds = !(isset($object['MODS-EN']) and isset($object['MODS-ES']) and isset($object['MODS-FR']));
    if ($missing_ds) {
      sleep(2);
      multilingual_create_multiple_metadatastreams($object, $datastream);
      multilingual_synchronize_mods_datastreams($object, $datastream);
    } 
  }
  if (preg_match('/OBJ-.*/', $datastream->id) === 1) {
    islandora_multilingual_create_all_derivatives($object, $datastream->id);
  }
}

function islandora_multilingual_islandora_datastream_modified($object, $datastream) {
  module_load_include('inc', 'islandora_multilingual', 'includes/Multilingual');
  if (preg_match('/MODS-/', $datastream->id) === 1) {
      if(DEBUG) {
          watchdog('multilingual', 'hook modified ran for ds: '.$datastream->id);
      }
    multilingual_synchronize_mods_datastreams($object, $datastream);
  }
}

/* 
 *  Find a better place for this - it's the permissions function for the Add tab to display.
 * Creates a shortcut "Add object" tab to the item menu for any object with CM islandora:collection
 * 
 */

function modified_collection_add_access($object = NULL) { 
    if (!is_object($object)) {
        return FALSE;
    }
    if (! islandora_object_access_callback(FEDORA_VIEW_OBJECTS, $object)) {
        return FALSE;
    }
    
    module_load_include('module', 'islandora_basic_collection', '');
    return islandora_basic_collection_ingest_access($object);
}

/** 
 * Fixme should go elsewhere
 * Alters the display of datastreams to include the last edited date.
 */
function islandora_multilingual_process_islandora_default_edit(&$variables) {
    $variables['datastream_table']['header'][] = array('data' => t('Last modified'));
    $i = 0;
    foreach ($variables['islandora_object'] as $ds) {
        $variables['datastream_table']['rows'][$i][] = array(
            'class' => 'datastream_modified', 
            'data' => $ds->createdDate,
        );
        $i = $i + 1;
    }
}

/**
 * Implements hook_form_alter()
 *
 * Adds our custom validate function to the metadata forms (ingest and edit), when the content model is our content model.
 * Also load the Fedora label into the MODS data, if not already present (edit form only)
 */
function islandora_multilingual_form_alter(&$form, $form_state, $form_id) {
 if ($form_id == 'xml_form_builder_edit_datastream_form' and in_array(ISLANDORA_MULTILINGUAL_CMODEL, $form_state['datastream']->parent->models)) {
   array_unshift($form['#validate'], 'islandora_multilingual_datastream_form_validate');
   multilingual_fill_mods_label_field($form, $form_state);
 }
 if ($form_id == 'islandora_ingest_form' and isset($form_state['islandora']['objects'])) {
     if (isset($form_state['islandora']['objects'][0]) and in_array(ISLANDORA_MULTILINGUAL_CMODEL, $form_state['islandora']['objects'][0]->models)) {
         array_unshift($form['#validate'], 'islandora_multilingual_datastream_form_validate');
     }
     $form['originInfo']['dateIssued']['#required'] = TRUE;
     $form['#attached']['js'] = array(drupal_get_path('module', 'islandora_multilingual') . '/js/updatelabel.js' => array( 'type' => 'file'));
     $form['titleInfo']['title']['#attributes']['onblur'] = "updatelabel();";
     $form['titleInfo']['subTitle']['#attributes']['onblur'] = "updatelabel();";
 }
 if ($form_id == 'islandora_xacml_editor_form') {
     $form['access']['#description'] = t('WARNING: do NOT enable view restrictions, then give permission to "anonymous" or "anonymous user". If you want logged-out users to see this object, disable view restrictions.');
 }  
}

function multilingual_fill_mods_label_field(&$form, $form_state) {
    $form['label']['#default_value'] = $form_state['datastream']->parent->label;
    $form['label']['#access'] = FALSE;
        
    //dpm($form_state['datastream']->
}
/*
 * This custom validation function runs after you edit metadata using a mods form
 * either when ingesting or when editing an existing datastream.
 *
 * It clears the unselected checkbox elements (so as to not write their nodes)
 *
 * It marks this datastream as "master".
 * 
 */
function islandora_multilingual_datastream_form_validate(array &$form, array &$form_state) {
    if ((($form['#form_id'] == 'islandora_ingest_form') and ($form_state['islandora']['step_id'] == 'xml_form_builder_metadata_step')) or (($form['#form_id'] == 'xml_form_builder_edit_datastream_form') )) {

        //form_set_error('error');
    }

    // Determine whether the form has been submitted (since validate also runs 
    // when the user creates/deletes tab form elements) .
    $form_was_submitted = FALSE;
    if (($form['#form_id'] == 'islandora_ingest_form') and ($form_state['islandora']['step_id'] == 'xml_form_builder_metadata_step') and $form_state['submitted']) {
        $form_was_submitted = TRUE;
    } elseif (($form['#form_id'] == 'xml_form_builder_edit_datastream_form') and ($form_state['submitted'])) {
        $form_was_submitted = TRUE;
    } 

    if ($form_was_submitted) {
        // Clear out the unselected keyword and language checkboxes from $form_state['storage'].
        $root = $form_state['storage']['objective_form_storage']['root'];
        foreach ($form_state['values']['Keywords'] as $keyword => $value) {
          if ($value == '0') {
            // Note: test against the string '0' to avoid string-to-int conversion weirdness. 
            unset($root->children['Keywords']->children[$keyword]);
          }
        }
        if (isset($form_state['values']['Language']) and $form_state['values']['Language'] == '0') {
            unset($root->children['Language']);
        }

        // Mark this datastream as "master"
        $form_state['values']['master'] = 'yes';
    }
	//dpm($form_state);
  //form_set_error('error');
}


/**
 * Implements hook_form_FORM_ID_alter()
 *
 * Alters the add datastream form to not let the user access the 'Label' field.
 * Prepends our validation function which copies the filename to the label field.
 */
function islandora_multilingual_form_islandora_add_datastream_form_alter(&$form, $form_state) {
    $form['label']['#type'] = 'hidden';
    $form['label']['#value'] = 'Datastream label';
    array_unshift($form['#validate'], 'islandora_multilingual_add_datastream_form_validate');
}

/**
 * Copies the name of the uploaded file to the label field in add_datastream_form.
 */
function islandora_multilingual_add_datastream_form_validate(array &$form, array &$form_state) {
    $file = file_load($form_state['values']['file']);
    $form_state['values']['label'] = $file->filename;
    $form_state['input']['label'] = $file->filename;
}




/**
 * Implements hook_xml_form_builder_get_transforms().
 *
 * Grabs any XSLTs from the "transforms" directory inside of this module.
 */

function islandora_multilingual_xml_form_builder_get_transforms() {
  $p = drupal_get_path('module', 'islandora_multilingual');
  $transforms = array();
  $include_path = "$p/transforms";
  $dir = opendir($include_path);
  if ($dir !== FALSE) {
    while (($file = readdir($dir)) !== FALSE) {
      if (preg_match('/\.xslt?$/', $file)) {
        $transforms["$file"] = "$include_path/$file";
      }
    }
  }
  closedir($dir);
  return $transforms;
}

function islandora_multilingual_xml_form_builder_get_self_transforms() {
  $p = drupal_get_path('module', 'islandora_multilingual');
  $transforms = array();
  $include_path = "$p/self_transforms";
  $dir = opendir($include_path);
  if ($dir !== FALSE) {
    while (($file = readdir($dir)) !== FALSE) {
      if (preg_match('/\.xslt?$/', $file)) {
        $transforms["$file"] = "$include_path/$file";
      }
    }
  }
  closedir($dir);
  return $transforms;
}
